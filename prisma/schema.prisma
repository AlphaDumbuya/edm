generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

model User {
  email                    String         @unique
  name                     String?
  hashedPassword           String
  createdAt                DateTime       @default(now())
  updatedAt                DateTime       @updatedAt
  role                     UserRole       @default(USER)
  id                       String         @id @default(uuid()) @db.Uuid
  image                    String?
  emailVerificationToken   String?
  emailVerified            Boolean        @default(false)
  passwordResetToken       String?
  passwordResetTokenExpiry DateTime?
  emailNotifications       Boolean        @default(true)
  pushNotifications        Boolean        @default(false)
  auditLogs                AuditLog[]
  blogPosts                BlogPost[]
  newsArticles             NewsArticle[]
  notifications            Notification[]
  sessions                 Session[]
  eventReminders           EventReminder[]
}

model Session {
  id        String   @id @default(cuid())
  userId    String   @db.Uuid
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model BlogPost {
  id        String   @id @default(uuid()) @db.Uuid
  title     String
  slug      String   @unique
  content   String
  authorId  String   @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  published Boolean  @default(false)
  imageUrl  String?
  tags      String[]
  author    User     @relation(fields: [authorId], references: [id])
}

enum ReminderStatus {
  PENDING
  SENT
  FAILED
}

model EventReminder {
  id           String         @id @default(uuid()) @db.Uuid
  eventId      String         @db.Uuid
  userId       String         @db.Uuid
  type         String         // '24h', '1h', '30m'
  scheduledFor DateTime
  status       ReminderStatus
  error        String?
  sentAt       DateTime?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  event        Event          @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([eventId, type])
  @@index([userId])
  @@index([status, scheduledFor])
}

model Event {
  id                 String              @id @default(uuid()) @db.Uuid
  title              String
  description        String
  date               DateTime
  time               String
  location           String
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  imageUrl           String?
  isVirtual          Boolean             @default(false)
  onlineLink         String?
  eventRegistrations EventRegistration[]
  eventReminders     EventReminder[]
}

enum RegistrationStatus {
  REGISTERED
  CANCELLED
}

model EventRegistration {
  id               String             @id @default(uuid()) @db.Uuid
  name             String
  email            String
  eventId          String             @db.Uuid
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  status           RegistrationStatus @default(REGISTERED)
  reminderSentAt   DateTime?
  lastReminderType String?            // '1hour', '1day', '1week'
  event            Event              @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@index([eventId])
}

model AuditLog {
  id         String   @id @default(uuid()) @db.Uuid
  userId     String?  @db.Uuid
  action     String
  entityType String
  entityId   String?  @db.Uuid
  timestamp  DateTime @default(now())
  details    Json?
  user       User?    @relation(fields: [userId], references: [id])

  @@index([userId, timestamp])
}

model Donation {
  id            String   @id @default(uuid()) @db.Uuid
  donorName     String?
  donorEmail    String?
  amount        Float
  date          DateTime @default(now())
  paymentMethod String
  campaign      String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model NewsArticle {
  id        String   @id @default(uuid()) @db.Uuid
  title     String
  slug      String   @unique
  content   String
  authorId  String   @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  published Boolean  @default(false)
  imageUrl  String?
  author    User     @relation(fields: [authorId], references: [id])
}

model PrayerRequest {
  id          String      @id @default(uuid()) @db.Uuid
  title       String
  body        String
  authorName  String?
  authorEmail String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  prayedAt    DateTime?   // When the prayer was last prayed for
  published   Boolean     @default(true)
  category    String?
  prayerLogs  PrayerLog[]
}

model News {
  id         String   @id @default(uuid()) @db.Uuid
  title      String
  slug       String   @unique
  content    String
  author     String
  published  Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  coverImage Json?

  @@map("news")
}

model Media {
  id        String   @id @default(uuid()) @db.Uuid
  type      String
  title     String
  date      DateTime
  imageUrl  String?
  videoUrl  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  published Boolean  @default(true)
  meta      Json?
}

model PrayerLog {
  id              String        @id @default(uuid())
  prayerRequestId String        @db.Uuid
  prayedByUserId  String?
  prayedByIp      String?
  prayerText      String?
  createdAt       DateTime      @default(now())
  prayerRequest   PrayerRequest @relation(fields: [prayerRequestId], references: [id], onDelete: Cascade)
}

model Testimonial {
  id        String   @id @default(uuid()) @db.Uuid
  name      String
  message   String
  createdAt DateTime @default(now())
  approved  Boolean  @default(false)
}

model Volunteer {
  id              String   @id @default(uuid()) @db.Uuid
  name            String
  email           String
  phone           String?
  areasOfInterest String[]
  availability    String
  message         String?
  createdAt       DateTime @default(now())
}

model Notification {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @db.Uuid
  message   String
  createdAt DateTime @default(now())
  read      Boolean  @default(false)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  EDITOR
  VIEWER
  USER
}
